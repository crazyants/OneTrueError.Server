using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using MarkdownWeb;
using MarkdownWeb.Storage;
using MarkdownWeb.Storage.Files;

namespace MarkdownToNamespaceDoc
{
    class Program
    {
        private static string Template = @"using System.Runtime.CompilerServices;

namespace {0}
{{
    // This file is Generated by the tool MarkdownToNamespaceDoc. ReadMe.md is the master.

    /// <summary>
    /// {1}
    /// </summary>
    /// <remarks>
    /// {2}
    /// </remarks>
    [CompilerGenerated]
    class NamespaceDoc
    {{
    }}
}}
";

        static void Main(string[] args)
        {
            var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            var pos = baseDirectory.LastIndexOf("Tools", StringComparison.OrdinalIgnoreCase);
            baseDirectory = Path.Combine(baseDirectory.Substring(0, pos), "OneTrueError");
            ScanDirectory(baseDirectory, baseDirectory);

        }

        private static void ScanDirectory(string rootDirectory, string directory)
        {
            var mdFile = Path.Combine(directory, "ReadMe.md");
            if (File.Exists(mdFile))
            {
                var contents = File.ReadAllText(mdFile).Replace("\r", "");
                string firstLine;

                var linePos = contents.IndexOf('\n');
                if (linePos == -1)
                {
                    firstLine = contents;
                    contents = "";
                }
                else
                {
                    firstLine = contents.Substring(0, linePos);
                    if (linePos + 1 < contents.Length && contents[linePos + 1] == '\n')
                        linePos++;
                    contents = contents.Remove(0, linePos + 1);

                    linePos = contents.IndexOf('\n');
                    if (linePos != -1)
                    {
                        var dashLine = contents.Substring(0, linePos);
                        if (dashLine.All(x => x == '='))
                            contents = contents.Remove(0, linePos + 1);
                    }
                }

                var repository = new FileBasedRepository(directory);
                var service = new PageService(repository, new UrlConverter("/"));
                var result = service.ParseString("/", contents);

                var content = result.Body.Replace("\n", "\n    /// ")
                    .Replace("<p>", "<para>")
                    .Replace("</p>", "</para>")
                    .Replace("<code>", "<c>")
                    .Replace("</code>", "</c>");

                var ns = directory.Remove(0, rootDirectory.Length).TrimStart('\\').Replace("\\", ".");
                var fileContents = string.Format(Template, ns, firstLine, content);
                var targetFile = Path.Combine(directory, "NamespaceDoc.cs");
                if (!File.Exists(targetFile) || File.ReadAllText(targetFile).Length != fileContents.Length)
                {
                    File.WriteAllText(targetFile, fileContents);
                }
            }

            foreach (var directory1 in Directory.GetDirectories(directory))
            {
                if (directory1.Contains(".git") || directory1.Contains(".vs") || directory1.Contains("docfx_project") || directory1.Contains("\\Help\\"))
                    continue;

                ScanDirectory(rootDirectory, directory1);
            }
        }
    }
}
