using System;

namespace codeRR.Server.ReportAnalyzer.Domain.Feedback
{
    /// <summary>
    ///     Our feedback entity
    /// </summary>
    public class FeedbackEntity
    {
        /// <summary>
        ///     Creates a new instance of <see cref="FeedbackEntity" />.
        /// </summary>
        /// <param name="applicationId">Application that the feedback is for</param>
        /// <param name="errorId">Unqiue report id generated by the client library</param>
        /// <exception cref="ArgumentNullException">errorId</exception>
        /// <exception cref="ArgumentOutOfRangeException">applicationId</exception>
        public FeedbackEntity(int applicationId, string errorId)
        {
            if (errorId == null) throw new ArgumentNullException(nameof(errorId));
            if (applicationId <= 0) throw new ArgumentOutOfRangeException(nameof(applicationId));

            ApplicationId = applicationId;
            ErrorId = errorId;
        }

        /// <summary>
        ///     Serialization constructor
        /// </summary>
        protected FeedbackEntity()
        {
        }

        /// <summary>
        ///     Application that the report belongs to
        /// </summary>
        public int ApplicationId { get; private set; }

        /// <summary>
        ///     Email to user (if the user want to receive status updates).
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        ///     Error id generated by the client library
        /// </summary>
        public string ErrorId { get; private set; }

        /// <summary>
        ///     Description written by the user after the exception was detected.
        /// </summary>
        public string Feedback { get; set; }

        /// <summary>
        ///     From where the report was uploaded.
        /// </summary>
        public string RemoteAddress { get; set; }

        /// <summary>
        ///     Report identity (PK in the report table)
        /// </summary>
        public int ReportId { get; set; }
    }
}